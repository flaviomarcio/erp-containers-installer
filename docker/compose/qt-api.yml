version: '3.9'
   
networks:
  stack-inbound:
    name: ${APPLICATION_DEPLOY_NETWORK_NAME}
    external: true

services:
  app:
    user: debian
    image: ${APPLICATION_DEPLOY_IMAGE}
    hostname: ${APPLICATION_DEPLOY_HOSTNAME}
    env_file:
      - ${APPLICATION_DEPLOY_ENV_FILE}
    environment:
      - ENV_FILE=/home/debian/env_file.env
      # - QT_VERSION=${QT_VERSION}
      # - QT_DIR=${QT_DIR}
      # - QT_LIBRARY_PATH=${QT_LIBRARY_PATH}
      # - LD_LIBRARY_PATH=${LD_LIBRARY_PATH}
      # - QT_PLUGIN_PATH=${QT_PLUGIN_PATH}
      # - QT_QPA_PLATFORM_PLUGIN_PATH=${QT_QPA_PLATFORM_PLUGIN_PATH}
    volumes:
      - ${PUBLIC_LIB_DIR}:/home/debian/lib
      - ${APPLICATION_DEPLOY_ENV_FILE}:/home/debian/env_file.env
      - ${APPLICATION_DEPLOY_DATA_DIR}:/app/data
      - ${APPLICATION_DEPLOY_BACKUP_DIR}:/app/backup
    ports:
      - target: ${APPLICATION_DEPLOY_PORT}
        protocol: tcp
        mode: ingress
    deploy:
      mode: ${APPLICATION_DEPLOY_MODE}
      replicas: ${APPLICATION_DEPLOY_REPLICAS}
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
      labels:
        - "traefik.http.routers.${APPLICATION_NAME}.rule=Host(`${APPLICATION_DEPLOY_DNS}`)"
        - "traefik.http.routers.${APPLICATION_NAME}.service=${APPLICATION_NAME}"
        - "traefik.http.services.${APPLICATION_NAME}.loadbalancer.server.port=${APPLICATION_DEPLOY_PORT}"
        - "traefik.docker.network=${APPLICATION_DEPLOY_NETWORK_NAME}"
    networks:
      - stack-inbound

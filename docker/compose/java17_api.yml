version: '3.9'
   
networks:
  stack-inbound:
    name: ${APPLICATION_DEPLOY_NETWORK_NAME}
    external: true

services:
  app:
    image: ${APPLICATION_DEPLOY_IMAGE}
    hostname: ${APPLICATION_DEPLOY_HOSTNAME}
    env_file:
      - ${APPLICATION_ENV_FILE}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ${APPLICATION_DEPLOY_DATA_DIR}:/storage/data:rw
    # healthcheck:
    #   test: ["CMD", "curl", "-f", "${APPLICATION_DEPLOY_HEALTH_CHECK_URL}"]
    #   interval: ${APPLICATION_DEPLOY_HEALTH_CHECK_INTERVAL}
    #   timeout: ${APPLICATION_DEPLOY_HEALTH_CHECK_TIMEOUT}
    #   retries: ${APPLICATION_DEPLOY_HEALTH_CHECK_RETRIES}
    deploy:
      mode: replicated
      replicas: ${APPLICATION_DEPLOY_REPLICAS}
      placement:
        constraints:
          - ${APPLICATION_DEPLOY_NODE}
      resources:
        limits:
          cpus: "${APPLICATION_DEPLOY_CPU}"
          memory: "${APPLICATION_DEPLOY_MEMORY}"
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
        failure_action: rollback
        monitor: 60s
        max_failure_ratio: 0.3
      rollback_config:
        parallelism: 1
        delay: 10s
        order: start-first

      restart_policy:
        condition: on-failure
      labels:
        - traefik.docker.network=${APPLICATION_DEPLOY_NETWORK_NAME}
        - traefik.http.routers.${APPLICATION_DEPLOY_NAME}.entryPoints=http,https
        - traefik.http.routers.${APPLICATION_DEPLOY_NAME}.tls=${STACK_TRAEFIK_TLS_ENABLED}
        - traefik.http.routers.${APPLICATION_DEPLOY_NAME}.rule=Host(`${APPLICATION_DEPLOY_DNS}`) || Host(`${APPLICATION_DEPLOY_DNS_PUBLIC}`) || Host(`${APPLICATION_DEPLOY_DNS_3RDPARTY}`)
        - traefik.http.routers.${APPLICATION_DEPLOY_NAME}.service=${APPLICATION_DEPLOY_NAME}
        - traefik.http.services.${APPLICATION_DEPLOY_NAME}.loadbalancer.server.port=${APPLICATION_DEPLOY_PORT}

    networks:
      - stack-inbound
